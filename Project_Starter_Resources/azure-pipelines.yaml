name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      name: selfHostedAgent
      vmImage: 'ubuntu-latest'
    steps:    
    
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'default'
        sshKeySecureFile: 'my_key'
   #      sshPublicKey: 'PUBLIC_KEY'      
#    steps:
#    - task: DownloadSecureFile@1
#      name: tfvardef
#      displayName: Download terraform.tfvars
#      inputs:
# test to scheck now sp
#        secureFile: 'terraform.tfvars' 


- stage: Build
  jobs:
  - job: Build
    displayName: Building Artifacts
    pool:
      name: selfHostedAgent
      vmImage: 'ubuntu-latest'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'Project_Starter_Resources/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage: Deployment
  jobs:
  - deployment: FakeRestAPI
    displayName: Deploying FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: "c68fdf5c-0c35-4c1c-a05f-b0acbc60cb2a"
              appName: 'webapp-1'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  
  - deployment: VMDeploy
    displayName: Deploying VM
    environment:
      name:  Test
      resourceType: VirtualMachine
      #     tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                # download chrome driver
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                fi
                 
                 # install chrome driver
                 unzip chromedriver_linux64.zip
                 sudo mv chromedriver /usr/bin/chromedriver
                 sudo chown root:root /usr/bin/chromedriver
                 sudo chmod +x /usr/bin/chromedriver
                 chromium-browser -version
                 chromedriver --version
                 # agent log analytics
                 wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w dbf2bd83-6d47-436b-a499-a2b566def8fe -s MuSR8Ti5MMi0E+9+1NM4NxCxFqJcfLzuGD0EtGhjXo3Vhy/THcSdCf1WyQnkXafD+6DiFjiOAEfJiQh6EbZVeg== -d opinsights.azure.com
              
             #    export PATH=$PATH:some/path


